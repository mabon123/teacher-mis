// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
 provider = "prisma-client-js"
}

datasource db {
 provider = "mongodb"
 url = env("DATABASE_URL")
}

// user
model User {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 username String @unique
 password String
 is_active Boolean

 //role and permission
 roles UserRole[]

 // User level relation
 user_level_id String? @db.ObjectId
 user_level UserLevel? @relation(fields: [user_level_id], references: [id])

 // Organization relation
 organization_id String? @db.ObjectId
 organization Organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

 //active tracking
 active_logs ActiveLog[]
 audit_logs AuditLog[]

 //location tracking
 createdProvinces Province[] @relation("ProvinceCreator")
 updatedProvinces Province[] @relation("ProvinceUpdater")
 createdDistricts District[] @relation("DistrictCreator")
 updatedDistricts District[] @relation("DistrictUpdater")
 createdCommunes Commune[] @relation("CommuneCreator")
 updatedCommunes Commune[] @relation("CommuneUpdater")
 createdVillages Village[] @relation("VillageCreator")
 updatedVillages Village[] @relation("VillageUpdater")
 createdOrganizations Organization[] @relation("OrganizationCreator")
 updatedOrganizations Organization[] @relation("OrganizationUpdater")

 //timestamp
 created_at DateTime @default(now())
 updated_at DateTime @updatedAt

 //staff relation
 staff_id String?  @db.ObjectId @unique
 staff     Staff?   @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

 //level type relation
 created_level_types LevelType[] @relation("LevelTypeCreator")
 updated_level_types LevelType[] @relation("LevelTypeUpdater")

 //user level relation
 created_user_levels UserLevel[] @relation("UserLevelCreator")
 updated_user_levels UserLevel[] @relation("UserLevelUpdater")

 staff_created Staff[] @relation("StaffCreator")
 staff_updated Staff[] @relation("StaffUpdater")

 staff_history_changes StaffHistory[] @relation("StaffHistoryChangedBy")
}

// role
model Role {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name_en String
 name_kh String
 code String
 is_active Boolean
 description String?
 permission RolePermission[]
 users UserRole[]
 created_at DateTime @default(now())
 updated_at DateTime @updatedAt
}

//Permission group
model PermissionGroup {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name_en String
 name_kh String
 code String @unique
 is_active Boolean
 description String?
 permissions Permission[]
 created_at DateTime @default(now())
 updated_at DateTime @updatedAt
}

// permission
model Permission {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name_en String
 name_kh String
 code String
 is_active Boolean
 description String?
 group_id String? @db.ObjectId
 group PermissionGroup? @relation(fields: [group_id], references: [id])
 role RolePermission[]
 created_at DateTime @default(now())
 updated_at DateTime @updatedAt
}

// role permission
model RolePermission {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 role_id String @db.ObjectId
 permission_id String @db.ObjectId
 role Role @relation(fields: [role_id], references: [id])
 permission Permission @relation(fields: [permission_id], references: [id])
}

// user role
model UserRole {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 user_id String @db.ObjectId
 role_id String @db.ObjectId
 user User @relation(fields: [user_id], references: [id])
 role Role @relation(fields: [role_id], references: [id])
}

// active log
model ActiveLog {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 session_id String
 start_at DateTime
 ended_at DateTime?
 ip_address String
 location String?
 user_agent String?
 details String?
 user_id String @db.ObjectId
 user User @relation(fields: [user_id], references: [id])
}

// audit log
model AuditLog{
 id String @id @default(auto()) @map("_id") @db.ObjectId
 active String
 timestamp DateTime
 user_id String @db.ObjectId
 user User @relation(fields: [user_id], references: [id])
 details String?
}

// location model
model Province {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name_en String
 name_kh String
 code String
 is_active Boolean
 description String?
 created_at DateTime @default(now())
 updated_at DateTime @updatedAt
 created_by String? @db.ObjectId
 updated_by String? @db.ObjectId
 creator User? @relation("ProvinceCreator", fields: [created_by], references: [id])
 updater User? @relation("ProvinceUpdater", fields: [updated_by], references: [id])
 districts District[]
 organizations Organization[]
}

model District {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name_en String
 name_kh String
 code String
 is_active Boolean
 description String?
 created_at DateTime @default(now())
 updated_at DateTime @updatedAt
 province_id String @db.ObjectId
 province Province @relation(fields: [province_id], references: [id])
 created_by String? @db.ObjectId
 updated_by String? @db.ObjectId
 creator User? @relation("DistrictCreator", fields: [created_by], references: [id])
 updater User? @relation("DistrictUpdater", fields: [updated_by], references: [id])
 communes Commune[]
 organizations Organization[]
}

model Commune {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name_en String
 name_kh String
 code String
 is_active Boolean
 description String?
 created_at DateTime @default(now())
 updated_at DateTime @updatedAt
 district_id String @db.ObjectId
 district District @relation(fields: [district_id], references: [id])
 created_by String? @db.ObjectId
 updated_by String? @db.ObjectId
 creator User? @relation("CommuneCreator", fields: [created_by], references: [id])
 updater User? @relation("CommuneUpdater", fields: [updated_by], references: [id])
 villages Village[]
 organizations Organization[]
}

model Village {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name_en String
 name_kh String
 code String
 is_active Boolean
 description String?
 created_at DateTime @default(now())
 updated_at DateTime @updatedAt
 commune_id String @db.ObjectId
 commune Commune @relation(fields: [commune_id], references: [id])
 created_by String? @db.ObjectId
 updated_by String? @db.ObjectId
 creator User? @relation("VillageCreator", fields: [created_by], references: [id])
 updater User? @relation("VillageUpdater", fields: [updated_by], references: [id])
 organizations Organization[]
}

//Base staff model to track all staff information
model Staff {
 id        String   @id @default(auto()) @map("_id") @db.ObjectId
 code      String   @unique
 first_name String
 last_name String
 email     String?  @unique
 phone     String?  @unique
 gender    String
 date_of_birth DateTime
 nationality String

 //timestamp
 created_at DateTime @default(now())
 updated_at DateTime @updatedAt

 //user relation
 created_by String? @db.ObjectId
 updated_by String? @db.ObjectId
 creator   User?    @relation("StaffCreator", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
 updater   User?    @relation("StaffUpdater", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

 user      User?
 user_id   String?  @db.ObjectId @unique

 history StaffHistory[]

 staff_subjects StaffSubject[]
 timetableEntries TimetableEntry[]
}

// organization
model Organization {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name_en String
 name_kh String
 code String
 is_active Boolean
 description String?
 location_type_id String @db.ObjectId
 location_type LocationType @relation(fields: [location_type_id], references: [id])

 //location relation
 province_id String @db.ObjectId
 district_id String @db.ObjectId
 commune_id String? @db.ObjectId
 village_id String? @db.ObjectId
 province Province @relation(fields: [province_id], references: [id])
 district District @relation(fields: [district_id], references: [id])
 commune Commune? @relation(fields: [commune_id], references: [id])
 village Village? @relation(fields: [village_id], references: [id])

 // User level relations
 user_levels UserLevel[]

 // User relations
 users User[]

 //user relation
 created_by String? @db.ObjectId
 updated_by String? @db.ObjectId
 creator User? @relation("OrganizationCreator", fields: [created_by], references: [id])
 updater User? @relation("OrganizationUpdater", fields: [updated_by], references: [id])

 //timestamp
 created_at DateTime @default(now())
 updated_at DateTime @updatedAt

 staff_history StaffHistory[]
}

model LocationType {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String   @unique
  name_en     String
  name_kh     String
  description String?
  order       Int?
  parent_id   String?  @db.ObjectId
  parent      LocationType? @relation("LocationTypeParent", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    LocationType[] @relation("LocationTypeParent")
  organizations Organization[]
  managed_by_level_type_relations LevelTypeCanManageLocationType[]
}

// Level Type model for defining different types of levels
model LevelType {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name_en String
 name_kh String
 code String @unique
 is_active Boolean @default(true)
 description String?

 // Level configuration
 level_order Int // Order in hierarchy (1 being highest)
 can_manage_relations LevelTypeCanManageLocationType[]
 can_manage_levels_ids String[] @db.ObjectId
 can_manage_levels LevelType[] @relation("LevelTypeHierarchy", fields: [can_manage_levels_ids], references: [id])
 managed_by_levels_ids String[] @db.ObjectId
 managed_by_levels LevelType[] @relation("LevelTypeHierarchy", fields: [managed_by_levels_ids], references: [id])

 // User level relations
 user_levels UserLevel[]

 // Timestamp
 created_at DateTime @default(now())
 updated_at DateTime @updatedAt
 created_by String? @db.ObjectId
 updated_by String? @db.ObjectId
 creator User? @relation("LevelTypeCreator", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
 updater User? @relation("LevelTypeUpdater", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// User Level model for actual user assignments
model UserLevel {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name String
 description String?
 is_active Boolean @default(true)

 // Level type relation
 level_type_id String @db.ObjectId
 level_type LevelType @relation(fields: [level_type_id], references: [id])

 // Organization relation
 organization_id String @db.ObjectId
 organization Organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

 // User relations
 users User[]

 // Timestamp
 created_at DateTime @default(now())
 updated_at DateTime @updatedAt
 created_by String? @db.ObjectId
 updated_by String? @db.ObjectId
 creator User? @relation("UserLevelCreator", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
 updater User? @relation("UserLevelUpdater", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model LevelTypeCanManageLocationType {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  level_type_id String @db.ObjectId
  location_type_id String @db.ObjectId
  level_type LevelType @relation(fields: [level_type_id], references: [id])
  location_type LocationType @relation(fields: [location_type_id], references: [id])
}

model StaffLevel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name_en   String
  name_kh   String
  code      String   @unique
  description String?
  salary_levels SalaryLevelOnStaffLevel[]
  staff_history StaffHistory[]
}

model SalaryLevel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String
  description String?
  staff_levels SalaryLevelOnStaffLevel[]
  staff_history StaffHistory[]
}

model SalaryLevelOnStaffLevel {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  staff_level_id String     @db.ObjectId
  salary_level_id String    @db.ObjectId
  staff_level   StaffLevel  @relation(fields: [staff_level_id], references: [id])
  salary_level  SalaryLevel @relation(fields: [salary_level_id], references: [id])
}

model AcademicYear {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name_en      String   // e.g. "2023-2024"
  name_kh   String
  start     DateTime
  end       DateTime
  is_active Boolean  @default(true)
  description String?
  staff_history StaffHistory[]
  timetableEntries TimetableEntry[]
}

model StaffHistory {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  staff_id        String   @db.ObjectId
  staff           Staff    @relation(fields: [staff_id], references: [id])
  organization_id String   @db.ObjectId
  organization    Organization @relation(fields: [organization_id], references: [id])
  position        String?
  start_date      DateTime
  end_date        DateTime?
  changed_by_id   String?  @db.ObjectId
  changed_by      User?    @relation("StaffHistoryChangedBy", fields: [changed_by_id], references: [id])
  note            String?
  created_at      DateTime @default(now())
  staff_level_id  String?  @db.ObjectId
  staff_level     StaffLevel? @relation(fields: [staff_level_id], references: [id])
  salary_level_id String?  @db.ObjectId
  salary_level    SalaryLevel? @relation(fields: [salary_level_id], references: [id])
  academic_year_id String? @db.ObjectId
  academic_year    AcademicYear? @relation(fields: [academic_year_id], references: [id])
}

model Subject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name_en   String
  name_kh   String
  code      String   @unique
  is_active Boolean  @default(true)
  staff_subjects StaffSubject[]
  timetableEntries TimetableEntry[]
}

model StaffSubject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  staff_id  String   @db.ObjectId
  subject_id String  @db.ObjectId
  staff     Staff    @relation(fields: [staff_id], references: [id])
  subject   Subject  @relation(fields: [subject_id], references: [id])
}

model Classroom {
  id               String           @id @map("_id") @db.ObjectId
  schoolId         String           @db.ObjectId
  // school           School           @relation(fields: [schoolId], references: [id])
  name             String           // e.g., "Room 101", "Science Lab A", "Auditorium"
  type             String           // e.g., "General Classroom", "Science Lab", "Computer Lab", "Gym"
  capacity         Int?             // Maximum student capacity
  isSpecialized    Boolean          @default(false) // True for labs, workshops etc.
  description      String?
  totalStudents    Int?             // Total number of students in this classroom
  totalFemaleStudents Int?          // Total number of female students in this classroom
  // timetableEntries TimetableEntry[]
  timetableEntries TimetableEntry[]

  @@unique([schoolId, name]) // Ensures unique classroom names per school
  @@map("classrooms")
}

model TimetableEntry {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  academicYearId      String      @db.ObjectId
  gradeLevelId        String      @db.ObjectId
  subjectId           String      @db.ObjectId
  staffId             String      @db.ObjectId
  classroomId         String      @db.ObjectId
  dayOfWeek           Int
  startTime           DateTime    @db.Date
  endTime             DateTime    @db.Date
  periodLengthMinutes Int
  sessionType         String?
  rotationDay         String?

  academicYear        AcademicYear @relation(fields: [academicYearId], references: [id])
  gradeLevel          GradeLevel   @relation(fields: [gradeLevelId], references: [id])
  subject             Subject      @relation(fields: [subjectId], references: [id])
  staff               Staff        @relation(fields: [staffId], references: [id])
  classroom           Classroom    @relation(fields: [classroomId], references: [id])

  @@index([academicYearId, gradeLevelId, dayOfWeek, startTime])
  @@map("timetable_entries")
}

model GradeLevel {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  timetableEntries TimetableEntry[]
}